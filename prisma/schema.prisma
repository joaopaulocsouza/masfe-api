generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid()) @db.VarChar(100)
  name           String          @db.VarChar(255)
  email          String          @unique @db.VarChar(100)
  password       String          @db.VarChar(255)
  gender         String?         @db.VarChar(30)
  occupation     String?         @db.VarChar(100)
  address        String?         @db.VarChar(255)
  birthday       DateTime        @db.Date
  personas       Persona[]
  uxCorrelations UxCorrelation[]
  verbs          Verb[]

  @@map("users")
}

model Persona {
  id                 String          @id @default(uuid()) @db.VarChar(100)
  name               String          @db.VarChar(100)
  occupation         String?         @db.VarChar(50)
  needs              String          @db.VarChar(400)
  possible_solutions String          @db.VarChar(400)
  user_id            String          @db.VarChar(100)
  gender             String?         @db.VarChar(20)
  age                Int?
  user               User            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  uxCorrelations     UxCorrelation[]

  @@map("personas")
}

model Verb {
  id            String          @id @default(uuid()) @db.VarChar(100)
  verb          String          @unique @db.VarChar(30)
  dimension     Int
  user_id       String          @db.VarChar(100)
  user          User            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  verbGarret    VerbGarret[]
  uxCorrelation UxCorrelation[]

  @@map("verb")
}

model Garret {
  id         String       @id @default(uuid()) @db.VarChar(100)
  element    String       @unique
  verbGarret VerbGarret[]

  @@map("garret")
}

model VerbGarret {
  verb_id   String @db.VarChar(100)
  verb      Verb   @relation(fields: [verb_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  garret_id String @db.VarChar(100)
  garret    Garret @relation(fields: [garret_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([verb_id, garret_id])
  @@map("verb_garret")
}

model UxCorrelation {
  id           String         @id @default(uuid()) @db.VarChar(100)
  name         String         @db.VarChar(50)
  dimension    Int
  description  String         @db.VarChar(400)
  user_id      String         @db.VarChar(100)
  persona_id   String         @db.VarChar(100)
  verb_id      String         @db.VarChar(100)
  persona      Persona        @relation(fields: [persona_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         User           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  verb         Verb           @relation(fields: [verb_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  relationUXAC RelationUXAC[]

  @@map("ux_correlation")
}

model RelationUXAC {
  id                 String               @id @default(uuid()) @db.VarChar(100)
  relation           String               @db.VarChar(255)
  ux_id              String               @db.VarChar(100)
  ux_correlation     UxCorrelation        @relation(fields: [ux_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  acceptanceCriteria AcceptanceCriteria[]

  @@map("relation_ux_ac")
}

model AcceptanceCriteria {
  id             String       @id @default(uuid()) @db.VarChar(100)
  criteria       String       @db.VarChar(255)
  relation_id    String       @db.VarChar(100)
  relation_ux_ac RelationUXAC @relation(fields: [relation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("acceptance_criteria")
}
